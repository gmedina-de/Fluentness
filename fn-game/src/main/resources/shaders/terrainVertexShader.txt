#version 330 core

in vec3 vertexCoordinates;
in vec2 textureCoordinates;
in vec3 normal;

out vec2 pass_textureCoordinates;
out vec3 surfaceNormal;
out vec3 toLightVector;
out vec3 toCameraVector;
out float visibility;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition;
uniform float fogDensity;
uniform float fogGradient;

void main(void) {

    vec4 transformedPosition =  transformationMatrix * vec4(vertexCoordinates, 1.0);
    vec4 positionRelativeToCamera = viewMatrix * transformedPosition;
    gl_Position = projectionMatrix * positionRelativeToCamera;

    pass_textureCoordinates = textureCoordinates;

    surfaceNormal = (transformationMatrix * vec4(normal, 0.0)).xyz;
    toLightVector = lightPosition - transformedPosition.xyz;

    toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - transformedPosition.xyz;

    float distance = length(positionRelativeToCamera.xyz);
    visibility = clamp(exp(-pow((distance*fogDensity),fogGradient)),0.0,1.0);
}