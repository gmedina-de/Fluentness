#version 330 core

in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 pixelColour;

uniform sampler2D blendMap;
uniform sampler2D blackTexture;
uniform sampler2D redTexture;
uniform sampler2D greenTexture;
uniform sampler2D blueTexture;

uniform float repeatTextures;
uniform vec3 lightColour;
uniform float ambientLight;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

void main(void) {

    // terrain multitexturing based on blendMap
    vec4 blendMapColour = texture(blendMap, pass_textureCoordinates);
    float blackTextureAmount = 1 - (blendMapColour.r + blendMapColour.g + blendMapColour.b);
    vec2 tiledCoordinates = pass_textureCoordinates * repeatTextures;
    vec4 blackTextureColour = texture(blackTexture, tiledCoordinates) * blackTextureAmount;
    vec4 redTextureColour = texture(redTexture, tiledCoordinates) * blendMapColour.r;
    vec4 greenTextureColour = texture(greenTexture, tiledCoordinates) * blendMapColour.g;
    vec4 blueTextureColour = texture(blueTexture, tiledCoordinates) * blendMapColour.b;
    vec4 finalTextureColour = blackTextureColour + redTextureColour + greenTextureColour + blueTextureColour;

    // normal light
    vec3 unitSurfaceNormal = normalize(surfaceNormal);
    vec3 unitToLightVector = normalize(toLightVector);
    float nDot1 = dot(unitSurfaceNormal, unitToLightVector);
    float brightness = max(nDot1, ambientLight);
    vec3 diffuse = brightness * lightColour;

    // specular light
    vec3 unitToCameraVector = normalize(toCameraVector);
    vec3 lightDirection = -unitToLightVector;
    vec3 reflectedLightDirection = reflect(lightDirection, unitSurfaceNormal);
    float specularFactor = max(dot(reflectedLightDirection, unitToCameraVector),0.0);
    float dampedSpecularFactor = pow(specularFactor, shineDamper);
    vec3 finalSpecular = dampedSpecularFactor * reflectivity * lightColour;

    // fog and return
    pixelColour = vec4(diffuse,1.0) * finalTextureColour + vec4(finalSpecular, 1.0);
    pixelColour = mix(vec4(skyColour,1.0), pixelColour, visibility);

}